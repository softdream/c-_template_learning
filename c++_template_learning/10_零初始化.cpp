#include <iostream>

// 对于基础类型，比如 int，double 以及指针类型，由于它们没有默认构造函数，因此它们不会被默认初始化成一个有意义的值。
// 比如任何未被初始化的局部变量的值都是未定义的;

// 因此在定义模板时，如果想让一个模板类型的变量被初始化成一个默认值，那么只是简单的定义是不够的，
// 因为对内置类型，它们不会被初始化;
// 例如：
template<typename T>
T test( T a )
{
	T x; // 这里因为不确定x到底是什么类型的变量，如果是内置类型就没有构造函数，这时会出现问题。

	return x + a;
}

// 通过下面你的写法就可以 保证即使是内置类型也可以得到适当的初始化：
template<typename T>
T test1(T a)
{
	// 这种初始化的方法被称为“值初始化（value initialization）”，它要么调用一个对象已有的构造函数，
	// 要么就用零来初始化这个对象。即使它有显式的构造函数也是这样;
	T x{};
	
	return x + a;
}

int main()
{
	//int a = test(100); // 执行报错 error C4700: 使用了未初始化的局部变量“x”；

	int a = test1(100);
	std::cout << "a = " << a << std::endl;

	return 0;
}